package nl.jgermeraad;


public class BridgeSimulation {
	private Bridge bridge;
	
	public static void main(String[] args) {
		new BridgeSimulation();
	}
	
	public BridgeSimulation() {
		bridge = new Bridge();
		new Thread(new Farmer("Northern farmer")).start();
		new Thread(new Farmer("Southern farmer")).start();
	}
	
	private class Farmer implements Runnable {
		private String name;
		private int sleepTime;
		
		public Farmer(String name) {
			this.name = name;
			sleepTime = 1000;
		}
		
		@Override
		public void run() {
			try {
				synchronized(this) {
					synchronized(bridge) {
						while(true) {
							if(!bridge.acquire())
								this.wait();
							System.out.println(name + " is crossing the bridge.");
							Thread.sleep(sleepTime);
							bridge.release();
							this.notifyAll();
						}
					}
				}
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	private static class Bridge {
		private boolean free = true;
		
		public synchronized boolean acquire() {
			if(!free)
				return false;
			free = false;
			return true;
		}
		
		public synchronized void release() {
			free = true;
		}
	}
}
