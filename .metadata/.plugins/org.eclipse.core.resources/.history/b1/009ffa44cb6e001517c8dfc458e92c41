package nl.hanze.storage;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;
import java.sql.Time;
import java.text.DateFormat;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import nl.hanze.Measurement;

public class StorageUnit implements Runnable {
	private Semaphore available;
	private BlockingQueue<Measurement> queue;
	private File storageFile;

	public static final String FILE_PATH = ".",
			FILE_NAME = "measurement-data.txt";

	public StorageUnit(BlockingQueue<Measurement> queue) {
		available = new Semaphore(1, true);
		this.queue = queue;
	}

	public void run() {
		final long start = System.nanoTime();
		try {
			available.acquire();
		} catch (InterruptedException e) {
			System.err.println("StorageUnit write operation was interrupted.");
		}

		String toWrite = "";

		Measurement m;
		
		long counterTime = 0;
		int measurements = 0;
		while (queue.size() > 0) {
			m = null;

			try {
				m = queue.take();
			} catch (InterruptedException e) {
			}
			long startCount = System.nanoTime();
			
			toWrite += convertToString(m);
			long endCount = System.nanoTime();
			
			counterTime = endCount - startCount;
			measurements++;
		}
		System.out.println("Time it took: " + counterTime);
		System.out.println("Measurments: " + measurements);	
		// realtime
		DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
		Date date = new Date();
		
		//System.out.println(toWrite);

		try {
			openFile();
		} catch (IOException ioe) {
			System.err.println("Could not create file.");
		}

		try {
			write(toWrite);
		} catch (IOException ioe) {
			System.err.println("Could not write data.");
		}

		available.release();
		final long end = System.nanoTime();
		System.out.println("StorageUnit Run took: " + ((end - start)) + " nanoseconds");
	}

	private String convertToString(Measurement m) {
		String temp = "";
		final long start = System.nanoTime();
		temp += "\n";
		for (int i = 0; i < 14; i++) {
			temp += m.getMeasurement(i);
			if (i != 13) {
				temp += ",";
			}
		}
		final long end = System.nanoTime();
		// TODO: Improve algorithm where necessary.
		//System.out.println("Converting to String took: " + ((end - start)) + " nanoseconds");
		//System.out.print(end-start + " + ");
		return temp;
	}

	private void write(String data) throws IOException {
		final long start = System.nanoTime();
		BufferedWriter out = new BufferedWriter(new FileWriter(storageFile,
				true));
		
		out.write(data);
		out.flush();
		
		out.close();
		final long end = System.nanoTime();

		System.out.println("Writing took: " + ((end - start)) + " nanoseconds");
	}

	private void openFile() throws IOException {
		
		storageFile = new File(FILE_PATH + "/" + FILE_NAME);
		
		final long start = System.nanoTime();
		if (!storageFile.exists()) {
			storageFile.createNewFile();
			System.out.println("NO FILE exists");
		}
		final long end = System.nanoTime();

		System.out.println("Opening file took: " + ((end - start)) + " nanoseconds");
	}
}
